{% extends "base.jinja" %}

{% block content %}
    <h1>Image Search</h1>

    <style>
    .search-results {
        text-align: center;
    }

    .image-search-result {
        display:    inline-block;
        width:      250px;
        margin:     6px;
        padding:    3px;
        background: #eee;
        border:     1px solid #ddd;
    }

    .image-search-result img {
        min-width:      250px;
        max-height: 400px;
    }

    .image-search-caption {

    }
    
    .image-search-date {
        color: #ccc;
        font-variant: small-caps;
        text-align: left;
        float: left;
    }

    .image-search-origin {
        color: #ccc;
        font-variant: small-caps;
        text-align: right;
        float: right;
    }
    
    .image-search-form {
        display:flex;
        flex-direction:row;
        align-items: center;
    }
    
    .image-search-form > .image-search-inputs-container {
        margin-right:1em;
        min-width:299px;
    }
    
    .image-search-form > .image-search-inputs-container > table input {
        width:100%;
    }
    
    
    .image-search-form > .image-search-inputs-container input[type=date],
    .image-search-form > .image-search-inputs-container input[type=time],
    .image-search-form > .image-search-inputs-container input[type=number] {
        padding: 3px 1px;
        border: solid 1px #a9a9a9;
        margin-bottom: 0px;
    }
    
    .image-search-form > .image-search-inputs-container input[type=date] {
        width:60%;
        min-width:130px;
    }
    .image-search-form > .image-search-inputs-container input[type=time] {
        width:25%;
        min-width:75px;
        margin-left:1%;
    }
    
    .image-search-form > .image-search-inputs-container input[type=range] {
        padding: 3px 2px;
        border: solid 1px #a9a9a9;
    }
    
    .image-search-form > .image-search-inputs-container th {
        text-align:right;
    }
    
    .image-search-form > .image-search-map-container {
        flex-grow:100;
        margin-left:1em;
    }

    #searching_notice {
        position: absolute;
        top: 0px;
        left: 0px;
        height: 100%;
        width: 100%;
        font-size: 150%;
        text-align: center;
        vertical-align: middle;
        background-color: #eee;
        opacity: 0.9;
    }
    
    .image-search-form > .image-search-inputs-container input:invalid {
      background:#ffeeee;
      border-color:#ddbbbb;
      color:#664444;
    }
    
    .image-search-form > .image-search-inputs-container input[name=radius_root]::before {
      top: -0.4em;
      left: 101%;
      right:auto;
      padding:0.3em 1em 1em 1em;
      font-weight:normal;
      z-index:200;
    }
    
    .image-search-form > .image-search-inputs-container input[name=radius_root]::after {
      top: 0.9em;
      left: 101%;
      right:auto;
      border-right: solid 0.4em rgba(6, 6, 6, 0);
      border-left: none;
      border-top: solid 0.3em transparent !important;
      border-bottom: solid 0.3em transparent;
      transition:background-color 0.3s ease-out, border-right-color 0.3s ease-out;
      -moz-transition:background-color 0.3s ease-out, border-right-color 0.3s ease-out;
      -webkit-transition:background-color 0.3s ease-out, border-right-color 0.3s ease-out;
      z-index:200;
    }
    
    .image-search-form > .image-search-inputs-container input[name=radius_root]:hover::after {
      border-right-color:rgba(6,6,6,1);
      border-top-color:transparent !important;
    }
    
    .ol-map-id2 {
      top:0.5em;
      right:0.5em;
    }
    
    .ol-map-id2-results {
      width:256px;
      overflow-y:scroll;
      float:right;
      height:310px;
      margin-top:2em;
    }
    
    .ol-map-id2-results-close,
    .ol-map-id2-results-stats {
      display:block;
      font-size:70%;
      font-weight:900;
      position:absolute;
      top:3em;
    }
    
    .ol-map-id2-results-stats {
      left:0.3em;
      color:black;
    }
    
    .ol-map-id2-results-close {
      right:0.3em;
      color:white;
      background-color:rgba(0,60,136,.5);
      border-radius:0.5em;
      padding:0em 0.5em;
      cursor:pointer;
    }
    
    .ol-map-id2-results-close:hover {
      background-color:#7b98bc;
    }
    
    .ol-map-id2-results:empty {
      display:none;
    }
    
    .ol-map-id2-results:empty + .ol-map-id2-results-stats,
    .ol-map-id2-results:empty + .ol-map-id2-results-stats + .ol-map-id2-results-close {
      display:none;
    }
    
    .ol-map-id2-results .ol-id2-map-search-result {
      display:block;
      background-position: left top;
      background-repeat: no-repeat;
      padding-left:20px;
      font-size:80%;
      font-weight:bold;
      text-decoration:none;
      color:#3a4953;
      background-color:rgba(220, 220, 220, 0.5);
      margin-bottom:2px;
      border-radius:0.3em;
      cursor:pointer;
    }
    
    .ol-map-id2-results .ol-id2-map-search-result:hover {
      background-color:rgba(220, 220, 255, 0.9);
    }
    
    .ol-map-id2-results .ol-id2-map-search-result .latlon {
      font-size:70%;
      display:block;
    }
    
    .ol-map-id2-results .ol-id2-map-search-result .latlon > * {
      font-style:italic;
    }
    
    .ol-map-id2-controls {
      display:block;
      display:flex;
      flex-direction:row;
      align-items: center;
    }
    
    /* searchbox and center-on-selection button */
    .ol-map-id2-controls input {
      flex-grow:100;
      width:200px;
      height:16px;
      line-height:16px;
      padding:2px 2px;
      margin-bottom:0px;
      transition:width 0.5s ease-out;
    }
    
    .ol-map-id2-controls input:focus {
      width:400px;
    }
    
    .ol-map-id2-controls .ol-map-search-button {
      margin-right:0.25em;
    }
    
    .ol-map-id2-controls button::before {
      top: -25%;
      right: 120%;
      left:auto;
      padding:1em 1em 0.3em 1em;
      font-weight:normal;
    }
    
    .ol-map-id2-controls button::after {
      top: 25%;
      right: 100%;
      left:auto;
      border-left: solid 0.4em rgba(6, 6, 6, 0);
      border-right: none;
      border-top: solid 0.3em transparent !important;
      border-bottom: solid 0.3em transparent;
      transition:background-color 0.3s ease-out, border-left-color 0.3s ease-out;
      -moz-transition:background-color 0.3s ease-out, border-left-color 0.3s ease-out;
      -webkit-transition:background-color 0.3s ease-out, border-left-color 0.3s ease-out;
    }
    
    .ol-map-id2-controls button:hover::after {
      border-left-color:rgba(6,6,6,1);
      border-top-color:transparent !important;
    }
    
    .ol-map-id2-controls button {
      opacity:1;
      transition:opacity 0.7s ease-in;
      -moz-transition:opacity 0.7s ease-in;
      -webkit-transition:opacity 0.7s ease-in;
    }
    
    .ol-map-id2-controls button[disabled] {
      opacity:0;
    }
    
    
    .image-search-inputs-container table {
      max-width:300px;
    }
    
    .image-search-inputs-container th[colspan] {
      padding-top:0.5em;
      text-align:left;
      border-bottom: solid 1px #888;
    }
    
    .image-search-inputs-container td.instructions {
      font-size:80%;
      font-style:italic;
    }
    
    </style>
    <link rel="stylesheet" href="{{ static('css/ol.css') }}" type="text/css">
    <link rel="stylesheet" href="{{ static('css/tooltips.css') }}" type="text/css">
    <style>
      .map {
        height: 400px;
        width: 100%;
      }
    </style>
    <script src="{{ static('js/ol.js') }}" type="text/javascript"></script>

    <div class="row well">
        <form name="image_search_form" id="image_search_form" class="image-search-form">
        <div class="image-search-inputs-container">
            <table>
                <tr><th colspan="2">Search terms:</th></tr>
                <tr><td colspan="2" class="instructions">Please provide search terms to search images by.</td></tr>
                <tr><td colspan="2"><input class="input-large" name="q" placeholder="Search terms"/></td></tr>
                <tr><th colspan="2">Area:</th></tr>
                <tr><td colspan="2" class="instructions">Select area on the map or enter latitude and longitude, and adjust search radius.</td></tr>
                <tr><th>Latitude:</th><td><input name="lat" type="number" step="any" min="-90" max="90"/></td></tr>
                <tr><th>Longitude:</th><td><input name="lon" type="number" step="any" min="-180" max="180"/></td></tr>
                <tr><th>Radius:</th><td><input name="radius_root" type="range" min="1" max="22359" value="22359" data-tooltip="Radius (in meters)"/></td></tr>
                <tr><th colspan="2">Dates and times:</th></tr>
                <tr><td colspan="2" class="instructions">Optionally, adjust date/time thresholds.</td></tr>
                <tr><th>Start:</th><td><input name="startdate" type="date"/><input name="starttime" type="time"/></td></tr>
                <tr><th>End:</th><td><input name="enddate" type="date"/><input name="endtime" type="time"/></td></tr>
            </table>
            <input name="radius" value="50000" type="hidden"/>
            <input id="image_search_submit" class="btn btn-primary pull-right" type="button" value="Search"/>
        </div>
        <div class="image-search-map-container">
            <div id="map" class="map"></div>
            <script type="text/javascript">
            
              /**
                * Define a namespace for the application.
                * http://openlayers.org/en/v3.2.1/examples/custom-controls.js
                */
              window.id2 = {};
              var id2 = window.id2;
            
              /**
                * @constructor
                * @extends {ol.control.Control}
                * @param {Object=} opt_options Control options.
                * 
                * id2 controls on the map -- ceter-on-selection and address geocoding
                */
              id2.ID2Controls = function(opt_options) {

                var options = opt_options || {};

                /**
                  * center-on-selection button
                  */
                var button = document.createElement('button');
                button.innerHTML = 'ʘ';
                button.setAttribute('data-tooltip', 'Center map on selection')
                button.setAttribute('type', 'button')
                button.setAttribute('disabled', 'disabled')
                button.setAttribute('class', 'ol-map-center-on-selection-button')
                
                /**
                  * address geocode searchbox
                  */
                var searchbox = document.createElement('input');
                searchbox.setAttribute('type', 'text')
                searchbox.setAttribute('placeholder', 'Search for addresses')
                searchbox.setAttribute('class', 'ol-map-search-box')
                
                /**
                  * start address geocode search button
                  */
                var searchbutton = document.createElement('button');
                searchbutton.innerHTML = '🔍';
                searchbutton.setAttribute('data-tooltip', 'Search for this address')
                searchbutton.setAttribute('type', 'button')
                searchbutton.setAttribute('disabled', 'disabled')
                searchbutton.setAttribute('class', 'ol-map-search-button')
                
                /**
                  * search and center-on-selection container
                  */
                var controls_container = document.createElement('div');
                controls_container.className = 'ol-map-id2-controls';
                controls_container.appendChild(searchbox);
                controls_container.appendChild(searchbutton);
                controls_container.appendChild(button);

                var this_ = this;
                var centerMap = function(e) {
                  /* this is where magic happens */
                  if (id2.circle != false) {
                    
                    /* pan animation */
                    var panimation = ol.animation.pan({
                      source: this_.getMap().getView().getCenter()
                    });
                    
                    /* bounce animation */
                    var bouncimation = ol.animation.bounce({
                      duration: 2000,
                      resolution: 9783.93962050256,
                    });
                    
                    /* zoom animation */
                    var zoomination = ol.animation.zoom({
                      resolution: this_.getMap().getView().getResolution()
                    });
                    
                    /* target zoom level */
                    var zoom = id2.getZoomFromRadiusRoot(
                                 $('[name=radius_root]').val()
                               )
                    
                    /* set teh animations */
                    if (this_.getMap().getView().getZoom() >= zoom) {
                      this_.getMap().beforeRender(zoomination, bouncimation, panimation);
                    } else {
                      this_.getMap().beforeRender(zoomination, panimation);
                    }
                    
                    /* center */
                    this_.getMap().getView().setCenter(
                      id2.circle.getCenter()
                    )
                    /* zoom */
                    this_.getMap().getView().setZoom(zoom)
                  }
                  /* not submitting the form is a good idea */
                  return false;
                };

                /**
                  * event listeners for the button
                  */
                button.addEventListener('click', centerMap, false);
                button.addEventListener('touchstart', centerMap, false);

                
                /**
                  * address geocoding search results container
                  */
                var results_container = document.createElement('div');
                results_container.className = 'ol-map-id2-results';
                
                /**
                  * closing the results view
                  */
                var results_close = document.createElement('div');
                results_close.className = 'ol-map-id2-results-close';
                results_close.innerHTML = '× close';
                
                /**
                  * result stats
                  */
                var results_stats = document.createElement('div');
                results_stats.className = 'ol-map-id2-results-stats';
                results_stats.innerHTML = 'found X results';
                
                /**
                  * the container for all of this
                  */
                var id2_container = document.createElement('div');
                id2_container.className = 'ol-map-id2 ol-unselectable ol-control';
                id2_container.appendChild(controls_container);
                id2_container.appendChild(results_container);
                id2_container.appendChild(results_stats);
                id2_container.appendChild(results_close);
                
                /**
                  * container for geocoding results
                  *
                var results_container = document.createElement('div');
                results_container.className = 'ol-map-id2-search-results ol-unselectable ol-control';*/
                
                ol.control.Control.call(this, {
                  element: id2_container,
                  target: options.target
                });

              };
              ol.inherits(id2.ID2Controls, ol.control.Control);
              

              //
              // Create map, giving it a rotate to north control.
              //
            
              var map = new ol.Map({
                controls: ol.control.defaults({
                  attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
                    collapsible: false
                  })
                }).extend([
                  new id2.ID2Controls()
                ]),
                target: 'map',
                layers: [
                  new ol.layer.Tile({
                    source: new ol.source.MapQuest({"layer":"osm"})
                  })
                ],
                view: new ol.View({
                  center: ol.proj.transform([28.80, 47.00], 'EPSG:4326', 'EPSG:3857'),
                  zoom: 4
                })
              });
              
              /* vector source and layer for our range circle */
              id2.vectorSource = new ol.source.Vector({
                projection: 'EPSG:4326'
              });
              id2.vectorLayer = new ol.layer.Vector({
                source: id2.vectorSource
              });
              map.addLayer(id2.vectorLayer);
              
              /* the circle */
              id2.circle = false
              id2.circleFeature = false
              
              id2.setCircle = function() {
                var radius = ($('input[name=radius]').val() / ol.proj.METERS_PER_UNIT.m) * 2;
                
                var lon = $('input[name=lon]').val() * 1 // we need a number here
                var lat = $('input[name=lat]').val() * 1 // an here
                
                id2.circle = new ol.geom.Circle(
                  ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'), radius, 'XY'
                )
                if (id2.circleFeature != false) {
                  id2.vectorSource.removeFeature(id2.circleFeature)
                }
                id2.circleFeature = new ol.Feature(id2.circle);
                // Source and vector layer
                id2.vectorSource.addFeature(id2.circleFeature);
                
                // enable the "center on selection" button
                $('.ol-map-id2-controls .ol-map-center-on-selection-button').removeAttr('disabled')
              }
              
              
              /* calculating a sane radius from a given zoom level */
              id2.getRadiusRootFromZoom = function(zoom) {
                if (zoom <= 7) return 22359
                return (22359 / (zoom - 6)) // FIXME this needs more work
              }
              
              
              /* calculating a sane radius from a given zoom level */
              id2.getZoomFromRadiusRoot = function(radius) {
                if (radius >= 22359) return 7
                return ( (22359 / radius) + 6 ) // FIXME this needs more work
              }
              
            </script>
        </div>
        </form>
        <div id="searching_notice" class="hide" role="alert">Searching... <i class="fa fa-spinner fa-pulse"></i></div>
    </div>

    <div id="search_statistics" class="hide"></div>

    <div class="row search-results" id="search_results">
    </div>
{% endblock %}

{% block after_js %}
<script>

    var current_search_id = 0;

    $(function() {
        $("#image_search_submit").on("click", start_search);
        $("#image_search_form").on("submit", start_search);
        /* make sure radius is handled */
        $('input[name=radius_root]')
          .on('change', id2.setCircle)
          .on('input', function(){
            // a nice logarithmic radius control
            radius = Math.floor(Math.pow((this.value / 100), 2))
            // set the hidden field value
            $('input[name=radius]').val(radius)
            // fix the data tooltip
            $(this).attr('data-tooltip', 'Radius: ' + radius + 'm')
          });
        /* make sure lat/lon are handled */
        $('input[name=lat], input[name=lon]').on('change', function(){
          /* we need *both* to be valid */
          if (!$('input[name=lat]').is(':valid')) return false
          if (!$('input[name=lon]').is(':valid')) return false
          /* yay, set the circle */
          id2.setCircle()
          /* pan animation */
          var panimation = ol.animation.pan({
            source: map.getView().getCenter(),
            duration: 750,
          });
          map.beforeRender(panimation);
          /* center */
          map.getView().setCenter(
            id2.circle.getCenter()
          )
        })
        /* handle the map address geocoding search button */
        $('.ol-map-id2-controls .ol-map-search-box')
          .on('input', function(e){
            if ($(this).val()) {
              $('.ol-map-id2-controls .ol-map-search-button').removeAttr('disabled')
            } else {
              $('.ol-map-id2-controls .ol-map-search-button').attr('disabled', 'disabled')
            }
          })
          .on('keypress', function(e){
            if (e.which == 13) {
              id2.geoSearch()
            }
          })
        $('.ol-map-id2-controls .ol-map-search-button').on('click', function(e){
          id2.geoSearch()
        })
        /* searching upon enter */
        $('.image-search-inputs-container input[name=q]').on('keypress', function(e){
          if (e.which == 13) {
            start_search()
          }
        })
        /* close search results */
        $('.ol-map-id2-results-close').on('click', function(){
          $('.ol-map-id2-results').empty();
        })
    });
    
    
    /* set the circle upon click */
    map.on('click', function(e){
      var lonlat = ol.proj.transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');
      /* fix the longitude to be within constraints */
      if (lonlat[0] > 180) {
        lonlat[0] = lonlat[0] % 180 - 180
        /* pan the map so that it makes sense, invisibly to the user */
        map.getView().setCenter(ol.proj.transform([lonlat[0], lonlat[1]], 'EPSG:4326', 'EPSG:3857'))
      } else if (lonlat[0] < -180) {
        lonlat[0] = lonlat[0] % 180 + 180
        /* pan the map so that it makes sense, invisibly to the user */
        map.getView().setCenter(ol.proj.transform([lonlat[0], lonlat[1]], 'EPSG:4326', 'EPSG:3857'))
      }
      /* set the data in inputs */
      $('input[name=lon]').val(lonlat[0])
      $('input[name=lat]').val(lonlat[1])
      /* set the selection circle */
      id2.setCircle()
    })
    
    /* change the radius to fit the zoom level -- if the circle has not yet been set */
    map.getView().on('change:resolution', function(e) {
      /* only if the circle has not yet been set */
      if (id2.circle == false) {
        radius = id2.getRadiusRootFromZoom(map.getView().getZoom())
        console.log('zoom: ' + map.getView().getZoom() + ' ; radius: ' + radius)
        $('input[name=radius_root]')
          .val(radius)
          .trigger('input')
          //.trigger('change') // DEBUG
      }
    })

    function check_search_results(searchid) {
        $.getJSON('{{url("search_images_check")}}', {"id": searchid}, function(data) {
            if (data.status) {
                $("#search_results").empty();
                $("#search_statistics").text("Found " + data.results.length + " images from " + data.bots_done + " of " + data.bots_total + " image sources.");
                $("#search_statistics").show();
                for (item in data.results) {
                    var item = data.results[item];
                    var timestamp = new Date(item.data.timestamp*1000);
                    result = $('<div class="image-search-result"/>');
                    result.append('<a href="'+item.data.result_url+'"><img src="'+item.data.image_url+'"/></a>');
                    result.append('<div class="image-search-caption">'+item.data.caption+'</div>');
                    result.append('<div class="image-search-link"><a href="'+item.data.linkurl+'">'+item.data.linktitle+'</a></div>');
                    result.append('<div class="image-search-date">'+timestamp+'</div>');
                    result.append('<div class="image-search-origin">Source: '+item.provider+'</div>');
                    $("#search_results").append(result);
                }
                if (data.done || data.checkin_after == -1) {
                    $("#searching_notice").hide();
                } else {
                    window.setTimeout(function() { check_search_results(searchid); }, data.checkin_after);
                }
            } else {
                window.setTimeout(function() { check_search_results(searchid); }, 2000);
            }
        });
    };

    function start_search() {
        $("#search_results").empty();
        $("#search_statistics").hide();
        $.getJSON('{{url("search_images_query")}}', $("#image_search_form").serialize(), function(data) {
            if (data.status) {
                $("#searching_notice").show();
                window.setTimeout(function() { check_search_results(data.searchid); }, data.checkin_after);
            }
        });
    }
    
    id2.geoSearch = function() {
      $('.ol-map-id2-results').empty()
      var q = 'http://nominatim.openstreetmap.org/search?format=json&q=' + $('.ol-map-id2-controls  input.ol-map-search-box').val()
      console.log('calling: ' + q)
      $.getJSON(
        q,
        function(data) {
          $('.ol-map-id2-controls .ol-map-search-box').blur()
          if (data) {
            $('.ol-map-id2-results-stats').html('found ' + data.length + ' results')
            for (item in data) {
              var item = data[item];
              result = $('<a class="ol-id2-map-search-result" style="background-image:url(' + item.icon + ')"/>');
              result.append("<span class=\"display-name\">" + item.display_name + "</span>")
              result.append("<span class=\"latlon\">lat: <lat>" + item.lat + "</lat>, lon: <lon>" + item.lon + "</lon></span>")
              result.on('click', id2.geoResultClick)
              $('.ol-map-id2-results').append(result);
            }
          }
      });
    }
    
    id2.geoResultClick = function(){
      /* pan animation */
      var panimation = ol.animation.pan({
        source: map.getView().getCenter(),
        duration: 750,
      });
      map.beforeRender(panimation);
      /* center */
      map.getView().setCenter(
        ol.proj.transform(
          [$(this).find('lon').html() * 1, $(this).find('lat').html() * 1],
          'EPSG:4326',
          'EPSG:3857'
        )
      )
      return false;
    }
</script>
{% endblock %}
