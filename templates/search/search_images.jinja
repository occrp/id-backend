{% extends "base.jinja" %}

{% block content %}
    <h1>Image Search</h1>

    <style>
    .search-results {
        text-align: center;
    }

    .image-search-result {
        display:    inline-block;
        width:      250px;
        margin:     6px;
        padding:    3px;
        background: #eee;
        border:     1px solid #ddd;
    }

    .image-search-result img {
        width:      250px;
        max-height: 400px;
    }

    .image-search-caption {

    }
    
    .image-search-date {
        color: #ccc;
        font-variant: small-caps;
        text-align: left;
        float: left;
    }

    .image-search-origin {
        color: #ccc;
        font-variant: small-caps;
        text-align: right;
        float: right;
    }
    
    .image-search-form {
        display:flex;
        flex-direction:row;
        align-items: center;
    }
    
    .image-search-form > .image-search-inputs-container {
        margin-right:1em;
        min-width:299px;
    }
    
    .image-search-form > .image-search-inputs-container > table input {
        width:100%;
    }
    
    
    .image-search-form > .image-search-inputs-container input[type=datetime-local] {
        padding: 3px 1px;
        border: solid 1px #a9a9a9;
        margin-bottom: 0px;
    }
    
    .image-search-form > .image-search-inputs-container input[type=range] {
        padding: 3px 2px;
        border: solid 1px #a9a9a9;
    }
    
    .image-search-form > .image-search-inputs-container th {
        text-align:right;
    }
    
    .image-search-form > .image-search-map-container {
        flex-grow:100;
        margin-left:1em;
    }

    #searching_notice {
        position: absolute;
        top: 0px;
        left: 0px;
        height: 100%;
        width: 100%;
        font-size: 150%;
        text-align: center;
        vertical-align: middle;
        background-color: #eee;
        opacity: 0.9;
    }
    
    .center-on-selection {
      top:0.5em;
      right:0.5em;
    }
    
    .center-on-selection button::before {
      top: -25%;
      right: 120%;
      left:auto;
      padding:1em 1em 0.3em 1em;
      font-weight:normal;
    }
    
    .center-on-selection button::after {
      top: 25%;
      right: 100%;
      left:auto;
      border-left: solid 0.4em rgba(6, 6, 6, 0);
      border-right: none;
      border-top: solid 0.3em transparent !important;
      border-bottom: solid 0.3em transparent;
      transition:background-color 0.3s ease-out, border-left-color 0.3s ease-out;
      -moz-transition:background-color 0.3s ease-out, border-left-color 0.3s ease-out;
      -webkit-transition:background-color 0.3s ease-out, border-left-color 0.3s ease-out;
    }
    
    .center-on-selection button:hover::after {
      border-left-color:rgba(6,6,6,1);
      border-top-color:transparent !important;
    }
    
    </style>
    <link rel="stylesheet" href="{{ static('css/ol.css') }}" type="text/css">
    <link rel="stylesheet" href="{{ static('css/tooltips.css') }}" type="text/css">
    <style>
      .map {
        height: 400px;
        width: 100%;
      }
    </style>
    <script src="{{ static('js/ol.js') }}" type="text/javascript"></script>

    <div class="row well">
        <form name="image_search_form" id="image_search_form" class="image-search-form">
        <div class="image-search-inputs-container">
            <table>
                <tr><th colspan="2"><input class="input-large" name="q" placeholder="Search"/></th></tr>
                <tr><th>Latitude:</th><td><input name="lat"/></td></tr>
                <tr><th>Longitude:</th><td><input name="lon"/></td></tr>
                <tr><th>Search radius:</th><td><input name="radius_root" type="range" min="1" max="22359" value="22359" data-tooltip="Radius (in meters)"/></td></tr>
                <tr><th>Start date:</th><td><input name="startdate" type="datetime-local"/></td></tr>
                <tr><th>End date:</th><td><input name="enddate" type="datetime-local"/></td></tr>
            </table>
            <input name="radius" value="50000" type="hidden"/>
            <input id="image_search_submit" class="btn btn-primary pull-right" type="button" value="Search"/>
        </div>
        <div class="image-search-map-container">
            <div id="map" class="map"></div>
            <script type="text/javascript">
            
              /**
                * Define a namespace for the application.
                * http://openlayers.org/en/v3.2.1/examples/custom-controls.js
                */
              window.app = {};
              var app = window.app;
            
              /**
                * @constructor
                * @extends {ol.control.Control}
                * @param {Object=} opt_options Control options.
                */
              app.CenterOnSelection = function(opt_options) {

                var options = opt_options || {};

                var button = document.createElement('button');
                button.innerHTML = 'Ê˜';
                button.setAttribute('data-tooltip', 'Center map on selection')
                button.setAttribute('type', 'button')

                var this_ = this;
                var centerMap = function(e) {
                  /* this is where magic happens */
                  if (circle != false) {
                    
                    /* pan animation */
                    var panimation = ol.animation.pan({
                      source: this_.getMap().getView().getCenter()
                    });
                    
                    /* bounce animation */
                    var bouncimation = ol.animation.bounce({
                      duration: 2000,
                      resolution: 9783.93962050256,
                    });
                    
                    /* zoom animation */
                    var zoomination = ol.animation.zoom({
                      resolution: this_.getMap().getView().getResolution()
                    });
                    
                    /* target zoom level */
                    var zoom = getZoomFromRadius(
                                 $('[name=radius_root]').val()
                               )
                    
                    /* set teh animations */
                    if (this_.getMap().getView().getZoom() >= zoom) {
                      this_.getMap().beforeRender(zoomination, bouncimation, panimation);
                    } else {
                      this_.getMap().beforeRender(zoomination, panimation);
                    }
                    
                    /* center */
                    this_.getMap().getView().setCenter(
                      circle.getCenter()
                    )
                    /* zoom */
                    this_.getMap().getView().setZoom(
                      getZoomFromRadius(
                        $('[name=radius_root]').val()
                      )
                    )
                  }
                  /* not submitting the form is a good idea */
                  return false;
                };

                button.addEventListener('click', centerMap, false);
                button.addEventListener('touchstart', centerMap, false);

                var element = document.createElement('div');
                element.className = 'center-on-selection ol-unselectable ol-control';
                element.appendChild(button);

                ol.control.Control.call(this, {
                  element: element,
                  target: options.target
                });

              };
              ol.inherits(app.CenterOnSelection, ol.control.Control);


              //
              // Create map, giving it a rotate to north control.
              //
            
              var map = new ol.Map({
                controls: ol.control.defaults({
                  attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
                    collapsible: false
                  })
                }).extend([
                  new app.CenterOnSelection()
                ]),
                target: 'map',
                layers: [
                  new ol.layer.Tile({
                    source: new ol.source.MapQuest({"layer":"osm"})
                  })
                ],
                view: new ol.View({
                  center: ol.proj.transform([28.80, 47.00], 'EPSG:4326', 'EPSG:3857'),
                  zoom: 4
                })
              });
              
              /* vector source and layer for our range circle */
              var vectorSource = new ol.source.Vector({
                projection: 'EPSG:4326'
              });
              var vectorLayer = new ol.layer.Vector({
                source: vectorSource
              });
              map.addLayer(vectorLayer);
              
              /* the circle */
              var circle = false
              var circleFeature = false
              
              function setCircle() {
                var radius = ($('input[name=radius]').val() / ol.proj.METERS_PER_UNIT.m) * 2;
                
                var lon = $('input[name=lon]').val() * 1
                var lat = $('input[name=lat]').val() * 1
                
                circle = new ol.geom.Circle(
                  ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'), radius, 'XY'
                )
                if (circleFeature != false) {
                  vectorSource.removeFeature(circleFeature)
                }
                circleFeature = new ol.Feature(circle);
                // Source and vector layer
                vectorSource.addFeature(circleFeature);
              }
              
              /* set the circle upon click */
              map.on('click', function(e){
                var lonlat = ol.proj.transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');
                $('input[name=lon]').val(lonlat[0])
                $('input[name=lat]').val(lonlat[1])
                setCircle()
              })
              
              
              /* calculating a sane radius from a given zoom level */
              function getRadiusFromZoom(zoom) {
                if (zoom <= 7) return 22359
                return (22359 / (zoom - 7))
              }
              
              
              /* calculating a sane radius from a given zoom level */
              function getZoomFromRadius(radius) {
                if (radius >= 22359) return 7
                return ( (22359 / radius) + 7 )
              }
              
              
              /* change the radius to fit the zoom level -- if the circle has not yet been set */
              map.getView().on('change:resolution', function(e) {
                /* only if the circle has not yet been set */
                if (circle == false) {
                  radius = getRadiusFromZoom(map.getView().getZoom())
                  $('input[name=radius_root]')
                    .val(radius)
                    .trigger('input')
                }
              })
            </script>
        </div>
        </form>
        <div id="searching_notice" class="hide" role="alert">Searching... <i class="fa fa-spinner fa-pulse"></i></div>
    </div>

    <div id="search_statistics" class="hide"></div>

    <div class="row search-results" id="search_results">
    </div>
{% endblock %}

{% block after_js %}
<script>

    var current_search_id = 0;

    $(function() {
        $("#image_search_submit").on("click", start_search);
        $("#image_search_form").on("submit", start_search);
        /* make sure radius is handled */
        $('input[name=radius_root]')
            .on('change', setCircle)
            .on("input", function(){
                // a nice logarithmic radius control
                radius = Math.floor(Math.pow((this.value / 100), 2))
                // set the hidden field value
                $('input[name=radius]').val(radius)
                // fix the data tooltip
                $(this).attr('data-tooltip', 'Radius: ' + radius + 'm')
            });
    });

    function check_search_results(searchid) {
        $.getJSON('{{url("search_images_check")}}', {"id": searchid}, function(data) {
            if (data.status) {
                $("#search_results").empty();
                $("#search_statistics").text("Found " + data.results.length + " images from " + data.bots_done + " of " + data.bots_total + " image sources.");
                $("#search_statistics").show();
                for (item in data.results) {
                    var item = data.results[item];
                    var timestamp = new Date(item.data.timestamp*1000);
                    result = $('<div class="image-search-result"/>');
                    result.append('<a href="'+item.data.result_url+'"><img src="'+item.data.image_url+'"/></a>');
                    result.append('<div class="image-search-caption">'+item.data.caption+'</div>');
                    result.append('<div class="image-search-date">'+timestamp+'</div>');
                    result.append('<div class="image-search-origin">'+item.provider+'</div>');
                    $("#search_results").append(result);
                }
                if (data.done || data.checkin_after == -1) {
                    $("#searching_notice").hide();
                } else {
                    window.setTimeout(function() { check_search_results(searchid); }, data.checkin_after);
                }
            } else {
                window.setTimeout(function() { check_search_results(searchid); }, 2000);
            }
        });
    };

    function start_search() {
        $("#search_results").empty();
        $("#search_statistics").hide();
        $.getJSON('{{url("search_images_query")}}', $("#image_search_form").serialize(), function(data) {
            if (data.status) {
                $("#searching_notice").show();
                window.setTimeout(function() { check_search_results(data.searchid); }, data.checkin_after);
            }
        });
    }
</script>
{% endblock %}
