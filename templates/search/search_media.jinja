{% extends "search/base.jinja" %}

{% block search_title %}Media Search{% endblock %}
{% block search_form %}
    <div class="well">
        <form name="image_search_form" id="search_form" class="image-search-form" data-type="image">
        <div class="image-search-inputs-container">
            <table>
                <tr><th colspan="2">{% trans %}Search terms:{% endtrans %}</th></tr>
                <tr><td colspan="2" class="instructions">{% trans %}Please provide search terms to search images by.{% endtrans %}</td></tr>
                <tr><td colspan="2"><input class="input-large" name="q" placeholder="Search terms"/></td></tr>
                <tr><th colspan="2">Area:</th></tr>
                <tr><td colspan="2" class="instructions">{% trans %}Select area on the map or enter latitude and longitude, and adjust search radius.{% endtrans %}</td></tr>
                <tr><th>{% trans %}Latitude:{% endtrans %}</th><td><input name="lat" type="number" step="any" min="-90" max="90"/></td></tr>
                <tr><th>{% trans %}Longitude:{% endtrans %}</th><td><input name="lon" type="number" step="any" min="-180" max="180"/></td></tr>
                <tr><th>{% trans %}Radius:{% endtrans %}</th><td><input name="radius_root" type="range" min="1" max="22359" value="22359" data-tooltip="{% trans %}Radius (in meters){% endtrans %}"/></td></tr>
                <tr><th colspan="2">{% trans %}Dates and times:{% endtrans %}</th></tr>
                <tr><td colspan="2" class="instructions">{% trans %}Optionally, adjust date/time thresholds.{% endtrans %}</td></tr>
                <tr><th>{% trans %}Start:{% endtrans %}</th><td><input name="startdate" type="date"/><input name="starttime" type="time"/></td></tr>
                <tr><th>{% trans %}End:{% endtrans %}</th><td><input name="enddate" type="date"/><input name="endtime" type="time"/></td></tr>
                <tr><th colspan="2">{% trans %}Services:{% endtrans %}</th></tr>
                <tr><td colspan="2" class="instructions">{% trans %}Choose services to search at.{% endtrans %}</td></tr>
                <tr><td colspan="2" class="search-providers"><div>
                {% for provider in search_providers %}
                  {% if provider|lower == 'vkontakte' %}
                    {% set provider_icon = 'vk' %}
                  {% else %}
                    {% set provider_icon = provider|lower %}
                  {% endif %}
                  <label class="provider"><input type="checkbox" checked="checked" name="providers" value="{{ provider }}"/><span><i class="fa fa-{{ provider_icon }}"></i>{{ provider }}</span></label>
                {% endfor %}</div></td></tr>
                <tr><td colspan="2"><button class="btn btn-large btn-primary" id="search_submit"><i class="fa fa-search"></i> {% trans %}Search{% endtrans %}</button></td></tr>
            </table>
            <input name="radius" value="50000" type="hidden"/>
        </div>
        <div class="image-search-map-container"><div id="map" class="map"></div></div>
        </form>
        <div id="searching_notice" class="hide" role="alert">{% trans %}Searching...{% endtrans %} <i class="fa fa-spinner fa-pulse"></i></div>
    </div>

{% endblock %}

{% block after_js %}
<script type="text/javascript" src="{{ static("bower_components/ol3-unofficial/ol.js") }}"></script>
<script>
    /**
      * Define a namespace for the application.
      * http://openlayers.org/en/v3.2.1/examples/custom-controls.js
      */

    /**
      * @constructor
      * @extends {ol.control.Control}
      * @param {Object=} opt_options Control options.
      *
      * ID2 controls on the map -- ceter-on-selection and address geocoding
      */
    ID2.ID2Controls = function(opt_options) {

      var options = opt_options || {};

      /**
        * center-on-selection button
        */
      var button = document.createElement('button');
      button.innerHTML = ' ò';
      button.setAttribute('data-tooltip', 'Center map on selection')
      button.setAttribute('type', 'button')
      button.setAttribute('disabled', 'disabled')
      button.setAttribute('class', 'ol-map-center-on-selection-button')

      /**
        * address geocode searchbox
        */
      var searchbox = document.createElement('input');
      searchbox.setAttribute('type', 'text')
      searchbox.setAttribute('placeholder', 'Search for addresses')
      searchbox.setAttribute('class', 'ol-map-search-box')

      /**
        * start address geocode search button
        */
      var searchbutton = document.createElement('button');
      searchbutton.innerHTML = 'üîç';
      searchbutton.setAttribute('data-tooltip', 'Search for this address')
      searchbutton.setAttribute('type', 'button')
      searchbutton.setAttribute('disabled', 'disabled')
      searchbutton.setAttribute('class', 'ol-map-search-button')

      /**
        * search and center-on-selection container
        */
      var controls_container = document.createElement('div');
      controls_container.className = 'ol-map-id2-controls';
      controls_container.appendChild(searchbox);
      controls_container.appendChild(searchbutton);
      controls_container.appendChild(button);

      var this_ = this;
      var centerMap = function(e) {
        /* this is where magic happens */
        if (ID2.circle != false) {
          ID2.flyToExtent(ID2.circle.getExtent())
        }
        /* not submitting the form is a good idea */
        return false;
      };

      /**
        * event listeners for the button
        */
      button.addEventListener('click', centerMap, false);
      button.addEventListener('touchstart', centerMap, false);


      /**
        * address geocoding search results container
        */
      var results_container = document.createElement('div');
      results_container.className = 'ol-map-id2-results';

      /**
        * closing the results view
        */
      var results_close = document.createElement('div');
      results_close.className = 'ol-map-id2-results-close';
      results_close.innerHTML = '√ó close';

      /**
        * result stats
        */
      var results_stats = document.createElement('div');
      results_stats.className = 'ol-map-id2-results-stats';
      results_stats.innerHTML = 'found X results';

      /**
        * the container for all of this
        */
      var id2_container = document.createElement('div');
      id2_container.className = 'ol-map-id2 ol-unselectable ol-control';
      id2_container.appendChild(controls_container);
      id2_container.appendChild(results_container);
      id2_container.appendChild(results_stats);
      id2_container.appendChild(results_close);

      /**
        * container for geocoding results
        *
      var results_container = document.createElement('div');
      results_container.className = 'ol-map-id2-search-results ol-unselectable ol-control';*/

      ol.control.Control.call(this, {
        element: id2_container,
        target: options.target
      });

    };
    ol.inherits(ID2.ID2Controls, ol.control.Control);


    //
    // Create map, giving it a rotate to north control.
    //

    var map = new ol.Map({
      controls: ol.control.defaults({
        attributionOptions: /** @type {olx.control.AttributionOptions} */ ({
          collapsible: false
        })
      }).extend([
        new ID2.ID2Controls()
      ]),
      target: 'map',
      layers: [
        new ol.layer.Tile({
          source: new ol.source.MapQuest({
            layer:"osm"
          })
        })
      ],
      view: new ol.View({
        center: ol.proj.transform([28.80, 47.00], 'EPSG:4326', 'EPSG:3857'),
        zoom: 4,
        maxZoom: 17
      })
    });

    /* vector source and layer for our range circle */
    ID2.vectorSource = new ol.source.Vector({
      projection: 'EPSG:4326'
    });
    ID2.vectorLayer = new ol.layer.Vector({
      source: ID2.vectorSource
    });
    map.addLayer(ID2.vectorLayer);

    /* the circle */
    ID2.circle = false
    ID2.circleFeature = false

    ID2.setCircle = function() {
      var radius = ($('input[name=radius]').val() / ol.proj.METERS_PER_UNIT.m) * 2;

      var lon = $('input[name=lon]').val() * 1 // we need a number here
      var lat = $('input[name=lat]').val() * 1 // an here

      ID2.circle = new ol.geom.Circle(
        ol.proj.transform([lon, lat], 'EPSG:4326', 'EPSG:3857'), radius, 'XY'
      )
      if (ID2.circleFeature != false) {
        ID2.vectorSource.removeFeature(ID2.circleFeature)
      }
      ID2.circleFeature = new ol.Feature(ID2.circle);
      // Source and vector layer
      ID2.vectorSource.addFeature(ID2.circleFeature);

      // enable the "center on selection" button
      $('.ol-map-id2-controls .ol-map-center-on-selection-button').removeAttr('disabled')
    }


    /* calculating a sane radius from a given zoom level */
    ID2.getRadiusRootFromZoom = function(zoom) {
      if (zoom <= 7) return 22359
      return (22359 / Math.pow(1.4, (zoom - 6)))
    }

    var current_search_id = 0;

    $(function() {
        /* make sure radius is handled */
        $('input[name=radius_root]')
          .on('change', ID2.setCircle)
          .on('input', function(){
            // a nice logarithmic radius control
            radius = Math.floor(Math.pow((this.value / 100), 2))
            // set the hidden field value
            $('input[name=radius]').val(radius)
            // fix the data tooltip
            $(this).attr('data-tooltip', 'Radius: ' + radius + 'm')
          });
        /* make sure lat/lon are handled */
        $('input[name=lat], input[name=lon]').on('change', function(){
          /* we need *both* to be valid */
          if (!$('input[name=lat]').is(':valid')) return false
          if (!$('input[name=lon]').is(':valid')) return false
          /* yay, set the circle */
          ID2.setCircle()
          /* pan animation */
          var panimation = ol.animation.pan({
            source: map.getView().getCenter(),
            duration: 750,
          });
          map.beforeRender(panimation);
          /* center */
          map.getView().setCenter(
            ID2.circle.getCenter()
          )
        })
        /* handle the map address geocoding search button */
        $('.ol-map-id2-controls .ol-map-search-box')
          .on('input', function(e){
            if ($(this).val()) {
              $('.ol-map-id2-controls .ol-map-search-button').removeAttr('disabled')
            } else {
              $('.ol-map-id2-controls .ol-map-search-button').attr('disabled', 'disabled')
            }
          })
          .on('keypress', function(e){
            if (e.which == 13) {
              ID2.geoSearch()
            }
          })
        $('.ol-map-id2-controls .ol-map-search-button').on('click', function(e){
          ID2.geoSearch()
        })
        /* searching upon enter */
        $('.image-search-inputs-container input[name=q]').on('keypress', function(e){
          if (e.which == 13) {
            ID2.Search.startImageSearch();
          }
        })
        /* close search results */
        $('.ol-map-id2-results-close').on('click', function(){
          $('.ol-map-id2-results').empty();
        })
    });


    /* set the circle upon click */
    map.on('click', function(e){
      var lonlat = ol.proj.transform(e.coordinate, 'EPSG:3857', 'EPSG:4326');
      /* fix the longitude to be within constraints */
      if (lonlat[0] > 180) {
        lonlat[0] = lonlat[0] % 180 - 180
        /* pan the map so that it makes sense, invisibly to the user */
        map.getView().setCenter(ol.proj.transform([lonlat[0], lonlat[1]], 'EPSG:4326', 'EPSG:3857'))
      } else if (lonlat[0] < -180) {
        lonlat[0] = lonlat[0] % 180 + 180
        /* pan the map so that it makes sense, invisibly to the user */
        map.getView().setCenter(ol.proj.transform([lonlat[0], lonlat[1]], 'EPSG:4326', 'EPSG:3857'))
      }
      /* set the data in inputs */
      $('input[name=lon]').val(lonlat[0])
      $('input[name=lat]').val(lonlat[1])
      /* set the selection circle */
      ID2.setCircle()
    })

    /* change the radius to fit the zoom level -- if the circle has not yet been set */
    map.getView().on('change:resolution', function(e) {
      /* only if the circle has not yet been set */
      if (ID2.circle == false) {
        radius = ID2.getRadiusRootFromZoom(map.getView().getZoom())
        $('input[name=radius_root]')
          .val(radius)
          .trigger('input')
      }
    })


    ID2.geoSearch = function() {
      $('.ol-map-id2-results').empty()
      var q = 'https://nominatim.openstreetmap.org/search?format=json&q=' + $('.ol-map-id2-controls  input.ol-map-search-box').val()
      $.getJSON(
        q,
        function(data) {
          $('.ol-map-id2-controls .ol-map-search-box').blur()
          if (data) {
            $('.ol-map-id2-results-stats').html('found ' + data.length + ' results')
            for (item in data) {
              var item = data[item];
              result = $('<a class="ol-id2-map-search-result" style="background-image:url(' + item.icon + ')"/>');
              result
                .attr('minlat', item.boundingbox[0])
                .attr('maxlat', item.boundingbox[1])
                .attr('minlon', item.boundingbox[2])
                .attr('maxlon', item.boundingbox[3])
              result.append("<span class=\"display-name\">" + item.display_name + "</span>")
              result.append("<span class=\"latlon\">lat: <lat>" + item.lat + "</lat>, lon: <lon>" + item.lon + "</lon></span>")
              result.on('click', ID2.geoResultClick)
              $('.ol-map-id2-results').append(result);
            }
          }
      });
    }


    /* bouncing and panning the map to fit an extent (i.e. selection circle, search result, etc) neatly */
    ID2.flyToExtent = function(extent){
      /* pan animation */
      var panimation = ol.animation.pan({
        source: map.getView().getCenter(),
        duration: 2000,
      });
      map.beforeRender(panimation)

      /* resolution for our target extent */
      var res = map.getView().getResolutionForExtent(
        extent,
        map.getSize()
      )

      /* our current extent */
      var cur_extent = map.getView().calculateExtent(
        map.getSize()
      )

      /**
        * do we need to bounce, or zoom?
        * zoom   : when current zoom level is higher than target zoom level AND the extent is within the current view
        * bounce : otherwise
        */
      if(
        (map.getView().getResolution() > res * 2) &&   // zoom level
        (ol.extent.containsExtent(cur_extent, extent)) // extent within the current view
      ) {
        /* zoom! */
        var zoomination = ol.animation.zoom({
          duration: 2000,
          resolution: map.getView().getResolution(),
        });
        map.beforeRender(zoomination);
      } else {
        /* bounce! */
        var bouncimation = ol.animation.bounce({
          duration: 2000,
          resolution: 9783.93962050256,
        });
        map.beforeRender(bouncimation);
      }

      /* go */
      map.getView().fitExtent(extent, map.getSize());
    }

    /* show the clicked result on the map */
    ID2.geoResultClick = function(){
      /* extent */
      var extent = [
        $(this).attr('minlon') * 1,
        $(this).attr('minlat') * 1,
        $(this).attr('maxlon') * 1,
        $(this).attr('maxlat') * 1
      ]
      /* translate */
      extent = ol.extent.applyTransform(extent, ol.proj.getTransform("EPSG:4326", "EPSG:3857"));
      /* fly */
      ID2.flyToExtent(extent)

      /* that's it, don't  handle this click any further */
      return false;
    }
</script>
{% endblock %}
